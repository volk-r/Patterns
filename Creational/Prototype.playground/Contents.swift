import Foundation

// ## Прототип (Prototype)

// ### Имя и тип:
// - **Имя**: Прототип (Prototype)
// - **Тип**: Порождающий паттерн проектирования

// ### Задача:
// Представьте, что вам нужно создать точную копию объекта. 
// Прямое клонирование объекта с его состоянием может быть неочевидным,
// особенно если объекты имеют скрытое состояние или сложную структуру.
// Прототип предлагает создать копию объекта, основываясь на доступном объекте-прототипе,
// избегая повторного прохождения через его инициализацию.

// ### Решение:
// Паттерн предлагает создать интерфейс, который позволяет объектам быть клонированными. 
// Этот интерфейс заставляет объекты реализовать метод клонирования,
// который должен возвращать копию самого себя.
// Это позволяет копировать объекты без привязки к их конкретным классам.

// ### Результаты:
// - **Плюсы**:
// - Позволяет клонировать объекты без зависимости от их конкретных классов.
// - Уменьшает повторное создание подобных объектов, что может быть полезно при ресурсоемких операциях инициализации.
// - **Минусы**:
// - Клонирование объектов с комплексной структурой может быть не всегда очевидно.

// ### Задача:
// Например, предположим, что у нас есть объект конфигурации, который содержит множество настроек. 
// Нам нужно создать копию этого объекта для тестирования,
// чтобы изменения настроек не влияли на оригинальный объект конфигурации.

// ### Код:

// Определяем протокол Cloneable с требованием метода clone
protocol Cloneable {
    func clone() -> Self
}

// Реализуем протокол Cloneable в структуре Car
struct Car: Cloneable {
    var make: String
    var model: String
    var year: Int

    // Реализация метода clone, возвращающая копию экземпляра
    func clone() -> Car {
        Car(make: self.make, model: self.model, year: self.year)
    }
}

// Создаем экземпляр Car
let originalCar = Car(
    make: "Honda",
    model: "Civic",
    year: 2018
)

// Клонируем originalCar
let clonedCar = originalCar.clone()

// Вывод информации для проверки
print("Оригинальный автомобиль: \(originalCar.make) \(originalCar.model) \(originalCar.year)")
print("Клонированный автомобиль: \(clonedCar.make) \(clonedCar.model) \(clonedCar.year)")

// Этот код является простым примером реализации паттерна Прототип, 
// демонстрирующим его способность к созданию копий объектов,
// сохраняя при этом их независимость.
