import Foundation

// ### Определение паттерна

// **Имя и тип**: Стратегия (Strategy) — это поведенческий паттерн проектирования.

// **Задача**: Паттерн Стратегия предназначен для определения семейства алгоритмов,
// инкапсуляции каждого из них и обеспечения их взаимозаменяемости.
// Это позволяет выбирать алгоритм независимо от клиентских данных во время выполнения программы.

// **Решение**: 
// Паттерн Стратегия предлагает вынести набор алгоритмов в собственные классы
// и сделать их взаимозаменяемыми внутри исходного контекста объекта.

// **Результаты с плюсами и минусами**:
// **Плюсы**:
// - Горячая замена алгоритмов на лету.
// - Изоляция и упрощение кода.
// - Удобство внедрения новых алгоритмов.
// - Принцип открытости/закрытости (классы легко расширяются новыми алгоритмами без изменения существующего кода).
// **Минусы**:
// - Усложнение программы за счет дополнительных классов.
// - Клиент должен знать, в чем различия между стратегиями, чтобы выбрать подходящую.

// ### Задача

// Представим, что мы разрабатываем приложение для навигации,
// где пользователь может выбирать различные способы перемещения от точки А до точки В:
// пешком, на автомобиле или на велосипеде.
// Задача — реализовать выбор способа перемещения динамически,
// в зависимости от предпочтений пользователя и текущих условий (например, пробки, погода).

// ### Пример кода

// Для демонстрации используем Swift Playground. Создадим базовый протокол `Strategy` для стратегий перемещения
// и несколько конкретных стратегий.


// Базовый протокол стратегии перемещения
protocol TravelStrategy {
    func travel(from start: String, to end: String) -> String
}

// Конкретная стратегия: Пешком
class WalkingStrategy: TravelStrategy {
    func travel(from start: String, to end: String) -> String {
        "Пешком из \(start) в \(end)"
    }
}

// Конкретная стратегия: На автомобиле
class DrivingStrategy: TravelStrategy {
    func travel(from start: String, to end: String) -> String {
        "На автомобиле из \(start) в \(end)"
    }
}

// Конкретная стратегия: На велосипеде
class BikingStrategy: TravelStrategy {
    func travel(from start: String, to end: String) -> String {
        "На велосипеде из \(start) в \(end)"
    }
}

// Контекст, использующий стратегию
class Navigator {
    private var strategy: TravelStrategy

    init(strategy: TravelStrategy) {
        self.strategy = strategy
    }

    func setStrategy(_ strategy: TravelStrategy) {
        self.strategy = strategy
    }

    func route(from start: String, to end: String) -> String {
        strategy.travel(from: start, to: end)
    }
}

// Использование
let navigator = Navigator(strategy: WalkingStrategy())
print(navigator.route(from: "Дом", to: "Работа"))

navigator.setStrategy(DrivingStrategy())
print(navigator.route(from: "Дом", to: "Работа"))

// ### Выводы

// Паттерн Стратегия позволяет легко изменять поведение объекта на лету,
// выбирая из различных алгоритмов в зависимости от контекста.
// В нашем примере мы смогли изменить способ перемещения без изменения кода класса `Navigator`,
// просто подставляя различные стратегии. Это делает код более гибким и легко расширяемым,
// позволяя добавлять новые способы перемещения без внесения изменений в существующие классы.
