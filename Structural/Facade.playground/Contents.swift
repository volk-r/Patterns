import Foundation

// Фасад (Facade) — это структурный паттерн проектирования,
// который предоставляет простой интерфейс к сложной системе классов, библиотеке или фреймворку.
// Цель Фасада — уменьшить сложность взаимодействия с подсистемами,
// предоставляя к ним унифицированный интерфейс.

// ### Имя и тип:
// - **Имя**: Фасад (Facade)
// - **Тип**: Структурный паттерн проектирования

// ### Задача:
// Когда система разрастается и становится сложной, работать с ней напрямую становится трудоемко. 
// Фасад предлагает решение этой проблемы, скрывая сложность системы за простым интерфейсом.
// Это особенно полезно, когда нужно взаимодействовать только с частью системы,
// не углубляясь во все её детали.

// ### Решение:
// Создать класс-фасад, который будет содержать в себе вызовы к различным компонентам подсистемы. 
// Клиенты взаимодействуют с фасадом, а он, в свою очередь, направляет эти запросы к нужным компонентам системы.
// Таким образом, клиентам не нужно знать о внутреннем устройстве подсистемы.

// ### Результаты, с плюсами и минусами:
// **Плюсы**:
// - Упрощает взаимодействие с комплексными системами.
// - Может служить точкой расширения для подсистем.
// - Изолирует клиентов от компонент подсистемы, уменьшая зависимость от них.
// **Минусы**:
// - Фасад может стать "объектом-богом", к которому привязана вся система.

// ### Задача:
// Допустим, у нас есть система для работы с медиафайлами, которая включает в себя 
// компоненты для чтения, обработки и сохранения файлов. Работа с каждым компонентом требует детального понимания его API.
// Создание фасада, который предоставит упрощенный интерфейс
// для выполнения стандартного набора действий с медиафайлами, упростит задачу для конечного пользователя.

// ### Код:

// Подсистемы
class VideoFileReader {
    func readVideoFile(name: String) {
        print("Чтение видео файла: \(name)")
    }
}

class VideoProcessor {
    func processVideo() {
        print("Обработка видео")
    }
}

class VideoFileSaver {
    func saveVideo() {
        print("Сохранение видео файла")
    }
}

// Фасад
class VideoFacade {
    private let reader = VideoFileReader()
    private let processor = VideoProcessor()
    private let saver = VideoFileSaver()

    func processVideoFile(name: String) {
        reader.readVideoFile(name: name)
        processor.processVideo()
        saver.saveVideo()
    }
}

// Использование Фасада
let videoFacade = VideoFacade()
videoFacade.processVideoFile(name: "example.mp4")


// В этом примере:
// - Созданы три класса, каждый из которых выполняет свою роль в системе работы с видео: 
//  `VideoFileReader` читает файл, `VideoProcessor` обрабатывает видео, а `VideoFileSaver` сохраняет результат.
// - Класс `VideoFacade` служит фасадом, предоставляя упрощенный интерфейс для работы с видео.
//   Он скрывает детали взаимодействия между подсистемами, предоставляя метод `processVideoFile`, который выполняет полный цикл работы с видеофайлом.
// - Клиенты системы работают с фасадом, не беспокоясь о деталях реализации подсистем, что упрощает использование системы.

// Этот пример иллюстрирует, как паттерн Фасад может упростить взаимодействие с комплексной системой,
// сокращая количество взаимодействий между клиентом и подсистемами.
